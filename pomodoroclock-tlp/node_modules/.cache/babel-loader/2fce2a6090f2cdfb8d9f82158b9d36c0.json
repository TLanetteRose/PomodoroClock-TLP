{"ast":null,"code":"//import React, {useState} from 'react';\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../src/styles/App.css';\nimport Break from './components/Break';\nimport Session from './components/Session';\nimport TimeLeft from './components/TimeLeft';\nimport soundfile from ''; //import Controllers from './components/Controllers';\n//import Sound from './components/Sound';\n//Dev-To AryanJ Tutorial in commented out sections\n\n/*function App() {\n  const [breakLengthSeconds, setBreakLength] = useState(300);\n  const [sessionLengthSeconds, setSessionLength] = useState(60 * 25);\n  const audioElement = useRef(null);\n  const[currentSessionType, setCurrentSessionType] = useState('Session');\n  const[intervalId, setIntervalId] = useState(null);\n  const[timeLeft, setTimeLeft] = useState(sessionLengthSeconds);\n\n// change timeLeft when sessionLength changes\n  useEffect(() => {\n    setTimeLeft(sessionLengthSeconds);\n  }, [sessionLengthSeconds]);\n\n  const decrementBreakLength = () => {\n    const newBreakLength = breakLengthSeconds - 60;\n    if (newBreakLength > 0) {\n      setBreakLength(newBreakLength);\n    }\n  };\n\n  const incrementBreakLength = () => {\n    const newBreakLength = breakLengthSeconds + 60;\n    if (newBreakLength <= 60 * 60) {\n    setBreakLength(newBreakLength);\n    }\n  };\n\n  const decrementSessionLength = () => {\n    const newSessionLength = sessionLengthSeconds - 60;\n    if (newSessionLength > 0) {\n      setSessionLength(newSessionLength);\n    } \n  };\n\n  const incrementSessionLength = () => {\n    const newSessionLength = sessionLengthSeconds + 60;\n    if (newSessionLength <= 60 * 60) {\n      setSessionLength(sessionLengthSeconds + 60);\n    }\n};\n  //Timer\n\n  const isStarted = intervalId !== null;\n  const handleStartStopClick = () => {\n    if (isStarted) {\n      clearInterval(intervalId);\n      setIntervalId(null);\n    } else {\n      const newIntervalId = setInterval(() => {\n        setTimeLeft(prevTimeLeft => {\n          const newTimeLeft = prevTimeLeft - 1;\n          if (newTimeLeft >= 0) {\n            return newTimeLeft;\n          }\n          // time left is less than zero\n          audioElement.current.play();\n          // if session: \n          if (currentSessionType === 'Session') {\n            //switch to break\n            setCurrentSessionType('Break');\n            // setTimeLeft to breakLength\n            return breakLengthSeconds;\n          }\n          // if break:\n          else if (currentSessionType === 'Break') {\n            //switch to session\n            setCurrentSessionType('Session');\n            //setTimeLeft to sessionLength\n            return sessionLengthSeconds;\n          }\n        });\n      }, 1000);\n      setIntervalId(newIntervalId);\n    }\n  };\n\n  //Reset \n  const handleResetBtnClick = () => {\n    //reset audio\n    audioElement.current.load();\n    //clear timeout interval\n    clearInterval(intervalId);\n    //set intervalId null\n    setIntervalId(null);\n    //set the sessiontype to 'Session'\n    setCurrentSessionType('Session');\n    //reset the session length to 25 minutes \n    setSessionLength(60 * 25);\n    //reset the break length to 5 minutes\n    setBreakLength(60 * 5);\n    //reset the timer to 25 minutes (initial session length)\n    setTimeLeft(60 * 25);\n  };\n\n\n    return (\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <h1 className=\"app-title\">Rebel-Cow Pomodoro Clock</h1>\n        </div>\n\n        <div className=\"timeleft-container\">\n          <TimeLeft \n          handleResetBtnClick={handleResetBtnClick}\n          handleStartStopClick={handleStartStopClick}\n          timerLabel={currentSessionType}\n          startStopButtonLabel={isStarted ? 'Stop' : 'Start'}\n          timeLeft={timeLeft} />\n        </div>\n        \n        <div className=\"settings-container\">\n          <Break\n            breakLengthSeconds={breakLengthSeconds}\n            incrementBreakLength={incrementBreakLength}\n            decrementBreakLength={decrementBreakLength}\n          />\n          <Session\n            sessionLengthSeconds={sessionLengthSeconds}\n            incrementSessionLength={incrementSessionLength}\n            decrementSessionLength={decrementSessionLength}\n          />\n        </div>\n        <audio id=\"beep\" preload=\"auto\" ref={audioElement} src=\"../public/tolling-bell_daniel-simion. mp3\" type=\"audio/mpeg\">\n        </audio>\n       \n        <div className=\"footer\">\n          <h3 className=\"footer-attribute\">\n            React JS Pomodoro Clock App created by{\" \"}\n            <a href=\"https://github.com/TLanetteRose\">\n              {\" \"}\n              <span> T.Lanette Pollard </span>\n            </a>{\" \"}\n            &nbsp; FreeCodeCamp Front End Libraries Project\n          </h3>\n        </div>\n      </div>\n    );\n  \n}*/\n\nconst App = () => {\n  const [sessionLengthSeconds, setSessionLength] = useState(25);\n  const [breakLengthSeconds, setBreakLength] = useState(5);\n  const [timerLabel, setTimerLabel] = useState('Session');\n  const [timeLeft, setTimeLeft] = useState(25 * 60);\n  const [timerRunning, setTimerRunning] = useState(false);\n  const myAudio = useRef();\n  const context = new AudioContext();\n\n  const incrementSessionLength = () => {\n    if (!timerRunning && sessionLengthSeconds < 60) {\n      setSessionLength(sessionLengthSeconds + 1);\n      setTimeLeft((sessionLengthSeconds + 1) * 60);\n    }\n  };\n\n  const decrementSessionLength = () => {\n    if (!timerRunning && sessionLengthSeconds > 1) {\n      setSessionLength(sessionLengthSeconds - 1);\n      setTimeLeft((sessionLengthSeconds - 1) * 60);\n    }\n  };\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/TLanPollard 1/Documents/GitHub/PomodoroClock-TLP/pomodoroclock-tlp/src/App.js"],"names":["React","useState","useEffect","useRef","Break","Session","TimeLeft","soundfile","App","sessionLengthSeconds","setSessionLength","breakLengthSeconds","setBreakLength","timerLabel","setTimerLabel","timeLeft","setTimeLeft","timerRunning","setTimerRunning","myAudio","context","AudioContext","incrementSessionLength","decrementSessionLength"],"mappings":"AAAA;AACA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,QAAiD,OAAjD;AACA,OAAO,uBAAP;AAEA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,SAAP,MAAsB,EAAtB,C,CACA;AACA;AAIA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4IA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAM,CAACC,oBAAD,EAAuBC,gBAAvB,IAA2CT,QAAQ,CAAC,EAAD,CAAzD;AACA,QAAM,CAACU,kBAAD,EAAqBC,cAArB,IAAuCX,QAAQ,CAAC,CAAD,CAArD;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,SAAD,CAA5C;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,KAAK,EAAN,CAAxC;AACA,QAAM,CAACgB,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAMkB,OAAO,GAAGhB,MAAM,EAAtB;AACA,QAAMiB,OAAO,GAAG,IAAIC,YAAJ,EAAhB;;AAEA,QAAMC,sBAAsB,GAAG,MAAM;AACnC,QAAI,CAACL,YAAD,IAAiBR,oBAAoB,GAAG,EAA5C,EAA+C;AAC7CC,MAAAA,gBAAgB,CAACD,oBAAoB,GAAE,CAAvB,CAAhB;AACAO,MAAAA,WAAW,CAAC,CAACP,oBAAoB,GAAG,CAAxB,IAA6B,EAA9B,CAAX;AACD;AACF,GALD;;AAOA,QAAMc,sBAAsB,GAAG,MAAM;AACnC,QAAI,CAACN,YAAD,IAAiBR,oBAAoB,GAAG,CAA5C,EAA8C;AAC5CC,MAAAA,gBAAgB,CAACD,oBAAoB,GAAG,CAAxB,CAAhB;AACAO,MAAAA,WAAW,CAAC,CAACP,oBAAoB,GAAG,CAAxB,IAA6B,EAA9B,CAAX;AACD;AACF,GALD;AAWD,CA3BD;;AAgCA,eAAeD,GAAf","sourcesContent":["//import React, {useState} from 'react';\nimport React, {useState, useEffect, useRef} from 'react';\nimport '../src/styles/App.css';\n\nimport Break from './components/Break';\nimport Session from './components/Session';\nimport TimeLeft from './components/TimeLeft';\nimport soundfile from ''\n//import Controllers from './components/Controllers';\n//import Sound from './components/Sound';\n\n\n\n//Dev-To AryanJ Tutorial in commented out sections\n/*function App() {\n  const [breakLengthSeconds, setBreakLength] = useState(300);\n  const [sessionLengthSeconds, setSessionLength] = useState(60 * 25);\n  const audioElement = useRef(null);\n  const[currentSessionType, setCurrentSessionType] = useState('Session');\n  const[intervalId, setIntervalId] = useState(null);\n  const[timeLeft, setTimeLeft] = useState(sessionLengthSeconds);\n\n// change timeLeft when sessionLength changes\n  useEffect(() => {\n    setTimeLeft(sessionLengthSeconds);\n  }, [sessionLengthSeconds]);\n\n  const decrementBreakLength = () => {\n    const newBreakLength = breakLengthSeconds - 60;\n    if (newBreakLength > 0) {\n      setBreakLength(newBreakLength);\n    }\n  };\n\n  const incrementBreakLength = () => {\n    const newBreakLength = breakLengthSeconds + 60;\n    if (newBreakLength <= 60 * 60) {\n    setBreakLength(newBreakLength);\n    }\n  };\n\n  const decrementSessionLength = () => {\n    const newSessionLength = sessionLengthSeconds - 60;\n    if (newSessionLength > 0) {\n      setSessionLength(newSessionLength);\n    } \n  };\n\n  const incrementSessionLength = () => {\n    const newSessionLength = sessionLengthSeconds + 60;\n    if (newSessionLength <= 60 * 60) {\n      setSessionLength(sessionLengthSeconds + 60);\n    }\n};\n  //Timer\n\n  const isStarted = intervalId !== null;\n  const handleStartStopClick = () => {\n    if (isStarted) {\n      clearInterval(intervalId);\n      setIntervalId(null);\n    } else {\n      const newIntervalId = setInterval(() => {\n        setTimeLeft(prevTimeLeft => {\n          const newTimeLeft = prevTimeLeft - 1;\n          if (newTimeLeft >= 0) {\n            return newTimeLeft;\n          }\n          // time left is less than zero\n          audioElement.current.play();\n          // if session: \n          if (currentSessionType === 'Session') {\n            //switch to break\n            setCurrentSessionType('Break');\n            // setTimeLeft to breakLength\n            return breakLengthSeconds;\n          }\n          // if break:\n          else if (currentSessionType === 'Break') {\n            //switch to session\n            setCurrentSessionType('Session');\n            //setTimeLeft to sessionLength\n            return sessionLengthSeconds;\n          }\n        });\n      }, 1000);\n      setIntervalId(newIntervalId);\n    }\n  };\n\n  //Reset \n  const handleResetBtnClick = () => {\n    //reset audio\n    audioElement.current.load();\n    //clear timeout interval\n    clearInterval(intervalId);\n    //set intervalId null\n    setIntervalId(null);\n    //set the sessiontype to 'Session'\n    setCurrentSessionType('Session');\n    //reset the session length to 25 minutes \n    setSessionLength(60 * 25);\n    //reset the break length to 5 minutes\n    setBreakLength(60 * 5);\n    //reset the timer to 25 minutes (initial session length)\n    setTimeLeft(60 * 25);\n  };\n\n\n    return (\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <h1 className=\"app-title\">Rebel-Cow Pomodoro Clock</h1>\n        </div>\n\n        <div className=\"timeleft-container\">\n          <TimeLeft \n          handleResetBtnClick={handleResetBtnClick}\n          handleStartStopClick={handleStartStopClick}\n          timerLabel={currentSessionType}\n          startStopButtonLabel={isStarted ? 'Stop' : 'Start'}\n          timeLeft={timeLeft} />\n        </div>\n        \n        <div className=\"settings-container\">\n          <Break\n            breakLengthSeconds={breakLengthSeconds}\n            incrementBreakLength={incrementBreakLength}\n            decrementBreakLength={decrementBreakLength}\n          />\n          <Session\n            sessionLengthSeconds={sessionLengthSeconds}\n            incrementSessionLength={incrementSessionLength}\n            decrementSessionLength={decrementSessionLength}\n          />\n        </div>\n        <audio id=\"beep\" preload=\"auto\" ref={audioElement} src=\"../public/tolling-bell_daniel-simion. mp3\" type=\"audio/mpeg\">\n        </audio>\n       \n        <div className=\"footer\">\n          <h3 className=\"footer-attribute\">\n            React JS Pomodoro Clock App created by{\" \"}\n            <a href=\"https://github.com/TLanetteRose\">\n              {\" \"}\n              <span> T.Lanette Pollard </span>\n            </a>{\" \"}\n            &nbsp; FreeCodeCamp Front End Libraries Project\n          </h3>\n        </div>\n      </div>\n    );\n  \n}*/\n\nconst App = () => {\n  const [sessionLengthSeconds, setSessionLength] = useState(25);\n  const [breakLengthSeconds, setBreakLength] = useState(5);\n  const [timerLabel, setTimerLabel] = useState('Session');\n  const [timeLeft, setTimeLeft] = useState(25 * 60);\n  const [timerRunning, setTimerRunning] = useState(false);\n  const myAudio = useRef();\n  const context = new AudioContext();\n\n  const incrementSessionLength = () => {\n    if (!timerRunning && sessionLengthSeconds < 60){\n      setSessionLength(sessionLengthSeconds +1)\n      setTimeLeft((sessionLengthSeconds + 1) * 60);\n    }\n  }\n\n  const decrementSessionLength = () => {\n    if (!timerRunning && sessionLengthSeconds > 1){\n      setSessionLength(sessionLengthSeconds - 1)\n      setTimeLeft((sessionLengthSeconds - 1) * 60);\n    }\n  }\n\n\n\n\n\n}\n\n\n\n\nexport default App;\n  "]},"metadata":{},"sourceType":"module"}