{"ast":null,"code":"var _jsxFileName = \"/Users/TLanPollard 1/Documents/GitHub/PomodoroClock-TLP/pomodoroclock-tlp/src/components/TimeLeft.js\";\n//Dev-To AryanJ Tutorial in commented out sections\nimport moment from 'moment';\nimport momentDurationFormatSetup from 'moment-duration-format';\nimport React, { useState } from 'react';\nimport { useEffect } from 'react';\nmomentDurationFormatSetup(moment);\n\nconst TimeLeft = ({\n  breakLength,\n  sessionLength\n}) => {\n  const [currentSessionType, setCurrentSessionType] = useState('Session');\n  const [intervalId, setIntervalId] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(sessionLength); //change timeLeft when sessionLength changes\n\n  useEffect(() => {\n    setTimeLeft(sessionLength);\n  }, [sessionLength]);\n  const isStarted = intervalId !== null;\n\n  const handleStartStopClick = () => {\n    if (isStarted) {\n      //if we are in started mode:\n      //we want to stop the timer\n      //clearInterval\n      clearInterval(intervalId);\n      setIntervalId(null);\n    } else {\n      //if we stopped mode:\n      //decrement timeLeft by one every second (1000 ms)\n      //to do this we'll use setInterval\n      const newIntervalId = setInterval(() => {\n        setTimeLeft(prevTimeLeft => {\n          const newTimeLeft = prevTimeLeft - 1;\n\n          if (newTimeLeft >= 0) {\n            return prevTimeLeft - 1;\n          } //if session:\n\n\n          if (currentSessionType === 'Session') {\n            //switch to break\n            setCurrentSessionType('Break'); //setTimeLeft to breakLength\n\n            setTimeLeft(breakLength);\n          } //if break:\n          else if (currentSessionType === 'Break') {\n              //switch to session\n              setCurrentSessionType('Session'); //setTimeLeft to sessionLength\n\n              setTimeLeft(sessionLength);\n            }\n        });\n      }, 100);\n      setIntervalId(newIntervalId);\n    }\n  };\n\n  const formattedTimeLeft = moment.duration(timeLeft, 's').format('mm:ss', {\n    trim: false\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"time-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    id: \"timer-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, currentSessionType), /*#__PURE__*/React.createElement(\"span\", {\n    id: \"time-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, formattedTimeLeft), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"start_stop\",\n    onClick: handleStartStopClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, startStopButtonLabel));\n};\n\nexport default TimeLeft;","map":{"version":3,"sources":["/Users/TLanPollard 1/Documents/GitHub/PomodoroClock-TLP/pomodoroclock-tlp/src/components/TimeLeft.js"],"names":["moment","momentDurationFormatSetup","React","useState","useEffect","TimeLeft","breakLength","sessionLength","currentSessionType","setCurrentSessionType","intervalId","setIntervalId","timeLeft","setTimeLeft","isStarted","handleStartStopClick","clearInterval","newIntervalId","setInterval","prevTimeLeft","newTimeLeft","formattedTimeLeft","duration","format","trim","startStopButtonLabel"],"mappings":";AAAA;AACA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,yBAAP,MAAsC,wBAAtC;AACA,OAAOC,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,SAAR,QAAwB,OAAxB;AAGAH,yBAAyB,CAACD,MAAD,CAAzB;;AAEA,MAAMK,QAAQ,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,KAAoC;AACjD,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CN,QAAQ,CAAC,SAAD,CAA5D;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAACI,aAAD,CAAxC,CAHiD,CAKjD;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,WAAW,CAACN,aAAD,CAAX;AACD,GAFQ,EAEN,CAACA,aAAD,CAFM,CAAT;AAIA,QAAMO,SAAS,GAAGJ,UAAU,KAAK,IAAjC;;AACA,QAAMK,oBAAoB,GAAG,MAAM;AACjC,QAAID,SAAJ,EAAe;AACb;AACA;AACA;AACAE,MAAAA,aAAa,CAACN,UAAD,CAAb;AACAC,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KAND,MAMO;AACL;AACA;AACA;AACA,YAAMM,aAAa,GAAGC,WAAW,CAAC,MAAM;AACtCL,QAAAA,WAAW,CAACM,YAAY,IAAI;AAC1B,gBAAMC,WAAW,GAAGD,YAAY,GAAG,CAAnC;;AACA,cAAIC,WAAW,IAAI,CAAnB,EAAsB;AACpB,mBAAOD,YAAY,GAAG,CAAtB;AACD,WAJyB,CAK1B;;;AACA,cAAIX,kBAAkB,KAAK,SAA3B,EAAsC;AACpC;AACAC,YAAAA,qBAAqB,CAAC,OAAD,CAArB,CAFoC,CAGpC;;AACAI,YAAAA,WAAW,CAACP,WAAD,CAAX;AACD,WALD,CAMA;AANA,eAOK,IAAIE,kBAAkB,KAAK,OAA3B,EAAoC;AACvC;AACAC,cAAAA,qBAAqB,CAAC,SAAD,CAArB,CAFuC,CAGvC;;AACAI,cAAAA,WAAW,CAACN,aAAD,CAAX;AACD;AACF,SAnBU,CAAX;AAoBD,OArBgC,EAqB9B,GArB8B,CAAjC;AAsBAI,MAAAA,aAAa,CAACM,aAAD,CAAb;AACD;AACF,GAnCD;;AAqCA,QAAMI,iBAAiB,GAAGrB,MAAM,CAACsB,QAAP,CAAgBV,QAAhB,EAA0B,GAA1B,EAA+BW,MAA/B,CAAsC,OAAtC,EAA+C;AAACC,IAAAA,IAAI,EAAE;AAAP,GAA/C,CAA1B;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,EAAE,EAAC,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyBhB,kBAAzB,CADF,eAEE;AAAM,IAAA,EAAE,EAAC,WAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBa,iBAAtB,CAFF,eAGE;AAAQ,IAAA,EAAE,EAAC,YAAX;AAAwB,IAAA,OAAO,EAAEN,oBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGU,oBADH,CAHF,CADF;AASH,CA3DD;;AA+DA,eAAepB,QAAf","sourcesContent":["//Dev-To AryanJ Tutorial in commented out sections\nimport moment from 'moment';\nimport momentDurationFormatSetup from 'moment-duration-format';\nimport React, {useState} from 'react';\nimport {useEffect} from 'react';\n\n\nmomentDurationFormatSetup(moment);\n\nconst TimeLeft = ({ breakLength, sessionLength }) => {  \n    const [currentSessionType, setCurrentSessionType] = useState('Session');\n    const [intervalId, setIntervalId] = useState(null);\n    const [timeLeft, setTimeLeft] = useState(sessionLength);\n\n    //change timeLeft when sessionLength changes\n    useEffect(() => {\n      setTimeLeft(sessionLength);\n    }, [sessionLength]);\n\n    const isStarted = intervalId !== null;\n    const handleStartStopClick = () => {\n      if (isStarted) {\n        //if we are in started mode:\n        //we want to stop the timer\n        //clearInterval\n        clearInterval(intervalId);\n        setIntervalId(null);\n      } else {\n        //if we stopped mode:\n        //decrement timeLeft by one every second (1000 ms)\n        //to do this we'll use setInterval\n        const newIntervalId = setInterval(() => {\n          setTimeLeft(prevTimeLeft => {\n            const newTimeLeft = prevTimeLeft - 1;\n            if (newTimeLeft >= 0) {\n              return prevTimeLeft - 1;\n            }\n            //if session:\n            if (currentSessionType === 'Session') {\n              //switch to break\n              setCurrentSessionType('Break');\n              //setTimeLeft to breakLength\n              setTimeLeft(breakLength);\n            }\n            //if break:\n            else if (currentSessionType === 'Break') {\n              //switch to session\n              setCurrentSessionType('Session');\n              //setTimeLeft to sessionLength\n              setTimeLeft(sessionLength);\n            }\n          });\n        }, 100); \n        setIntervalId(newIntervalId);\n      }\n    };\n\n    const formattedTimeLeft = moment.duration(timeLeft, 's').format('mm:ss', {trim: false});\n\n    return (\n      <div className=\"time-content\">\n        <label id=\"timer-label\">{currentSessionType}</label>\n        <span id=\"time-left\">{formattedTimeLeft}</span>\n        <button id=\"start_stop\" onClick={handleStartStopClick}>\n          {startStopButtonLabel}\n        </button>\n      </div>\n    );\n};\n\n  \n\nexport default TimeLeft;\n"]},"metadata":{},"sourceType":"module"}