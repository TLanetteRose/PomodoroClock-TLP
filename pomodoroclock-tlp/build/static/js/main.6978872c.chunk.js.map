{"version":3,"sources":["michigan_frog.wav","components/Session.js","components/Break.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Session","props","className","id","onClick","incrementSessionLength","sessionLengthSeconds","decrementSessionLength","Break","incrementBreakLength","breakLengthSeconds","decrementBreakLength","App","myAudio","useRef","context","AudioContext","useState","setBreakLength","setSessionLength","timerLabel","setTimerLabel","timeLeft","setTimeLeft","timerRunning","setTimerRunning","minutes","Math","floor","seconds","useEffect","countdown","setInterval","current","play","clearInterval","slice","resume","pause","currentTime","ref","src","soundfile","type","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6978872c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/michigan_frog.785ffdf3.wav\";","import React from 'react';\n\nconst Session = props => {\n    return (\n        <div className=\"session-container\">\n            <h2 id=\"session-label\">Session Length</h2>\n\n            <div className=\"session-btn\">\n                <button id=\"session-increment\" className=\"session-ctrl-btn\" onClick={props.incrementSessionLength}>\n                    <i className=\"fa fa-plus-square fa-1x\"/>\n                </button>\n                <h3 id=\"session-length\">\n                    {props.sessionLengthSeconds}\n                </h3>\n                <button id=\"session-decrement\" className=\"session-ctrl-btn\" onClick={props.decrementSessionLength}>\n                    <i className=\"fa fa-minus-square fa-1x\"/>\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Session;","import React from 'react';\n\nconst Break = props => {\n    return (\n        <div className=\"break-container\">\n            <h2 id=\"break-label\">Break Length</h2>\n\n            <div className=\"break-btn\">\n                <button id=\"break-increment\" className=\"break-ctrl-btn\" onClick={props.incrementBreakLength}>\n                    <i className=\"fa fa-plus-square\"/>\n                </button>\n\n                <h3 id=\"break-length\">\n                    {props.breakLengthSeconds}\n                </h3>\n\n                <button id=\"break-decrement\" className=\"break-ctrl-btn\" onClick={props.decrementBreakLength}>\n                    <i className=\"fa fa-minus-square\"/>\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Break;","import React, {useState, useEffect, useRef} from 'react';\nimport Session from '../src/components/Session';\nimport Break from '../src/components/Break';\nimport './styles/App.css';\nimport soundfile from './michigan_frog.wav';\n\n\n\nconst App = () => {\n  const myAudio = useRef();\n  const context = new AudioContext();\n  const [breakLengthSeconds, setBreakLength]= useState(5);\n  const [sessionLengthSeconds, setSessionLength]= useState(25);\n  const [timerLabel, setTimerLabel]= useState('Session');\n  const [timeLeft, setTimeLeft]= useState(25 * 60);\n  const [timerRunning, setTimerRunning]= useState(false);\n\n  const incrementSessionLength = () => {\n    if (!timerRunning && sessionLengthSeconds < 60){\n      setSessionLength(sessionLengthSeconds + 1)\n      setTimeLeft((sessionLengthSeconds + 1) * 60);\n    }\n  }\n  const decrementSessionLength = () => {\n    if(!timerRunning && sessionLengthSeconds > 1){\n      setSessionLength(sessionLengthSeconds - 1)\n      setTimeLeft((sessionLengthSeconds - 1) * 60);\n    }\n  }\n  const incrementBreakLength = () => {\n    if(!timerRunning && breakLengthSeconds < 60){\n      setBreakLength(breakLengthSeconds + 1)\n    }\n  }\n  const decrementBreakLength = () => {\n    if(!timerRunning && breakLengthSeconds > 1){\n      setBreakLength(breakLengthSeconds - 1)\n    }\n  }\n\n  let minutes = Math.floor(timeLeft / 60);\n  let seconds = timeLeft % 60;\n\n  useEffect(() => {\n    const handleSwitch = () => {\n      if (timerLabel === 'Session') {\n        setTimerLabel('Break');\n        setTimeLeft(breakLengthSeconds * 60);\n      } else if (timerLabel === 'Break') {\n        setTimerLabel('Session');\n        setTimeLeft(sessionLengthSeconds * 60);\n      }\n    }\n\n    let countdown = null;\n    if (timerRunning && timeLeft > 0) {\n      countdown = setInterval(() => {\n        setTimeLeft(timeLeft - 1);\n      }, 1000);\n    } else if (timerRunning && timeLeft === 0) {\n      countdown = setInterval(() => {\n        setTimeLeft(timeLeft - 1);\n      }, 1000);\n      myAudio.current.play();\n      handleSwitch();\n    } else {\n      clearInterval(countdown);\n    }\n    return () => clearInterval(countdown);\n  }, \n  [timerRunning, timeLeft, timerLabel, breakLengthSeconds, sessionLengthSeconds, myAudio]);\n\n  const handleStart = () => {\n    context.resume();\n    setTimerRunning(true);\n  }\n\n  const handleStop = () => {\n    setTimerRunning(false);\n  }\n\n  const handleReset = () => {\n    setSessionLength(25);\n    setBreakLength(5);\n    setTimeLeft(25 * 60);\n    setTimerLabel('Session');\n    setTimerRunning(false);\n    myAudio.current.pause();\n    myAudio.current.currentTime = 0;\n  }\n\n\n  return  (\n    <div className=\"app-container\">\n      <div className=\"header-container\">\n        <h1 className=\"app-title\">Rebel-Cow Pomodoro Clock</h1>\n      </div>\n\n      <div className=\"timer-container\">\n        <h2 id=\"timer-label\">{timerLabel}</h2>\n        <h3 id=\"time-left\">\n          {minutes < 10 ? (\"0\" + minutes).slice(-2) : minutes}:{seconds < 10 ? (\"0\" + seconds).slice(-2) : seconds}\n        </h3>\n        <div className=\"timer-btn\">\n          <button id=\"start_stop\" className=\"start-stop-btn\" onClick={timerRunning ? handleStop : handleStart}>\n            <p className=\"start-stop-title\">Start/Stop</p>\n            <i className=\"fa fa-play fa-2x\"/>\n            <i className=\"fa fa-pause fa-2x\"/>\n          </button>\n          <button id=\"reset\" className=\"reset-btn\" onClick={handleReset}>\n            <p className=\"reset-title\">Reset</p>\n            <i className=\"fa fa-refresh fa-2x\"/>\n          </button>\n        </div>\n      </div>\n\n      <div className=\"settings-container\">\n        <Break \n          breakLengthSeconds={breakLengthSeconds}\n          incrementBreakLength={incrementBreakLength}\n          decrementBreakLength={decrementBreakLength}\n        />\n        <Session \n          sessionLengthSeconds={sessionLengthSeconds}\n          incrementSessionLength={incrementSessionLength}\n          decrementSessionLength={decrementSessionLength}\n        />\n      </div>\n\n      <div className=\"sound-container\">\n        <audio id=\"beep\" ref={myAudio} src={soundfile} type=\"audio\"></audio>\n      </div>\n      <div className=\"footer-container\">\n        <div >\n          <p className=\"footer\"> React Pomodoro Clock App created by &nbsp;{\" \"}<a href=\"https://github.com/TLanetteRose\">{\" \"}<span> T.Lanette Pollard </span></a> &nbsp;FreeCodeCamp Front End Libraries Project </p>\n        </div>\n      </div>\n\n    </div>\n  )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App  />,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}